// Lexical

WhiteSpace:
	Space {Space}

Space:
	' '
	'\t'
	'\v'
	'\u000C'
	EndOfLine
	Comment
	
EndOfLine:
	'\r'
	'\n'
	'\r\n'
	EndOfFile

EndOfFile:
	physical end of file
	'\0'

Comment:
	'/*' characters '*/'
	'//' characters EndOfLine

Token:
	Identifier
	Keyword
	CharLiteral
	StringLiteral
	IntLiteral
	FloatLiteral
	'+'
	'+='
	'++'
	'-'
	'-='
	'--'
	'~'
	'~='
	'*'
	'*='
	'/'
	'/='
	'%'
	'%='
	'<'
	'<='
	'<<'
	'<<='
	'>'
	'>='
	'>>'
	'>>='
	'>>>'
	'>>>='
	'&'
	'&='
	'&&'
	'|'
	'|='
	'||'
	'^'
	'^='
	'='
	'=='
	'.'
	'!'
	'!='
	'('
	')'
	'['
	']'
	'{'
	'}'
	':'
	','
	';'
	'#'
	EOF

Identifier:
	IdentifierStart {IdentifierChar}

IdentifierStart:
	_
	Letter

IdentifierChar:
	IdentifierStart
	DecimalDigit

Keyword:
	'as'
	'break'
	'case'
	'class'
	'catch'
	'continue'
	'default'
	'do'
	'else'
	'false'
	'finally'
	'for'
	'foreach'
	'function'
	'if'
	'is'
	'local'
	'method'
	'null'
	'return'
	'switch'
	'throw'
	'true'
	'try'
	'vararg'
	'while'
	
CharLiteral:
	"'" (Character | EscapeSequence) "'"

StringLiteral:
	RegularString
	WysiwygString
	AltWysiwygString

RegularString:
	'"' {Character | EscapeSequence | EndOfLine} '"'

EscapeSequence:
	'\''
	'\"'
	'\\'
	'\a'
	'\b'
	'\f'
	'\n'
	'\r'
	'\t'
	'\v'
	'\x' HexDigit HexDigit
	'\u' HexDigit HexDigit HexDigit HexDigit
	'\U' HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit HexDigit
	'\ ' DecimalDigit [DecimalDigit [DecimalDigit]]

WysiwygString:
	'@"' {Character | EndOfLine} '"'

AltWysiwygString:
	'`' {Character | EndOfLine} '`'

IntLiteral:
	Decimal
	Binary
	Octal
	Hexadecimal
	
Decimal:
	DecimalDigit {DecimalDigit | '_'}

DecimalDigit:
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'
	'8'
	'9'

Binary:
	'0b' BinaryDigit {BinaryDigit | '_'}

BinaryDigit:
	'0'
	'1'

Octal:
	'0c' OctalDigit {OctalDigit | '_'}

OctalDigit:
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'

Hexadecimal:
	'0x' HexDigit {HexDigit | '_'}

HexDigit:
	'0'
	'1'
	'2'
	'3'
	'4'
	'5'
	'6'
	'7'
	'8'
	'9'
	'A'
	'a'
	'B'
	'b'
	'C'
	'c'
	'D'
	'd'
	'E'
	'e'
	'F'
	'f'

FloatLiteral:
	[DecimalDigit {DecimalDigit | '_'}] '.' DecimalDigit {DecimalDigit | '_'} [Exponent]
	DecimalDigit {DecimalDigit | '_'} [Exponent]

Exponent:
	('e' | 'E')['+' | '-'] DecimalDigit {DecimalDigit | '_'}

// -----------------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------------
// -----------------------------------------------------------------------------------------------------------------

// Syntax

Chunk:
	{Statement}

Statement:
	BlockStatement
	ExpressionStatement
	DeclarationStatement
	IfStatement
	WhileStatement
	DoWhileStatement
	ForStatement
	ForeachStatement
	SwitchStatement
	ContinueStatement
	BreakStatement
	ReturnStatement
	TryCatchStatement
	ThrowStatement

BlockStatement:
	'{' {Statement} '}'
	
ExpressionStatement:
	BaseExpression ';'
	
DeclarationStatement:
	LocalVariableDeclaration ';'
	FunctionDeclaration
	ClassDeclaration

LocalVariableDeclaration:
	'local' Identifier {',' Identifier} ['=' Expression]

FunctionDeclaration:
	'function' Identifier {'.' Identifier} Parameters BlockStatement
	'local' SimpleFunctionDeclaration

SimpleFunctionDeclaration:
	'function' Identifier Parameters BlockStatement
	
ClassDeclaration:
	'class' Identifier [':' Expression] '{' {ClassMember} '}'
	
ClassMember:
	MethodDeclaration
	Identifier ['=' Expression] ';'
	
MethodDeclaration:
	'method' Identifier Parameters BlockStatement

IfStatement:
	'if' '(' Expression ')' Statement ['else' Statement]
	
WhileStatement:
	'while' '(' Expression ')' Statement

DoWhileStatement:
	'do' Statement 'while' '(' Expression ')'

ForStatement:
	'for' '(' [(BaseExpression | LocalVariableDeclaration)] ';' [Expression] ';' [BaseExpression] ')' Statement
	
ForeachStatement:
	'foreach' '(' 'local' Identifier {',' 'local' Identifier} ';' Expression {',' Expression} ')' Statement
	
SwitchStatement:
	'switch' '(' Expression ')' '{' CaseStatement {CaseStatement} [DefaultStatement] '}'
	
CaseStatement:
	'case' Expression {',' Expression} ':' {Statement}
	
DefaultStatement:
	'default' ':' {Statement}
	
ContinueStatement:
	'continue' ';'
	
BreakStatement:
	'break' ';'
	
ReturnStatement:
	'return' [Expression {',' Expression}] ';'
	
TryCatchStatement:
	'try' BlockStatement (('catch' '(' Identifier ')' BlockStatement) || ('finally' BlockStatement))
	
ThrowStatement:
	'throw' Expression ';'

Parameters:
	'(' [Identifier {',' Identifier} [',' 'vararg']] ')'
	'(' 'vararg' ')'

BaseExpression:
	Assignment
	Expression

Assignment:
	AssignmentLHS {',' AssignmentLHS} '=' Expression

AssignmentLHS:
	Identifier
	// Note - for these two, the PostfixExpression must start with Identifier.
	PostfixExpression '[' Expression ']'
	PostfixExpression '.' Identifier

Expression:
	OrOrExpression
	OrOrExpression '+=' Expression
	OrOrExpression '-=' Expression
	OrOrExpression '~=' Expression
	OrOrExpression '*=' Expression
	OrOrExpression '/=' Expression
	OrOrExpression '%=' Expression
	OrOrExpression '<<=' Expression
	OrOrExpression '>>=' Expression
	OrOrExpression '>>>=' Expression
	OrOrExpression '|=' Expression
	OrOrExpression '^=' Expression
	OrOrExpression '&=' Expression

OrOrExpression:
	AndAndExpression
	OrOrExpression '||' AndAndExpression

AndAndExpression:
	OrExpression
	AndAndExpression '&&' OrExpression

OrExpression:
	XorExpression
	OrExpression '|' XorExpression

XorExpression:
	AndExpression
	XorExpression '^' AndExpression

AndExpression:
	EqualExpression
	AndExpression '&' EqualExpression

EqualExpression:
	RelExpression
	EqualExpression '==' RelExpression
	EqualExpression '!=' RelExpression
	EqualExpression 'is' RelExpression
	EqualExpression '!' 'is' RelExpression

RelExpression:
	ShiftExpression
	RelExpression 'as' ShiftExpression
	RelExpression '<' ShiftExpression
	RelExpression '<=' ShiftExpression
	RelExpression '>' ShiftExpression
	RelExpression '>=' ShiftExpression

ShiftExpression:
	ShiftExpression '<<' AddExpression
	ShiftExpression '>>' AddExpression
	ShiftExpression '>>>' AddExpression

AddExpression:
	MulExpression
	AddExpression '+' MulExpression
	AddExpression '-' MulExpression
	AddExpression '~' MulExpression

MulExpression:
	UnaryExpression
	MulExpression '*' UnaryExpression
	MulExpression '/' UnaryExpression
	MulExpression '%' UnaryExpression

UnaryExpression:
	PostfixExpression
	'++' UnaryExpression
	'--' UnaryExpression
	'-' UnaryExpression
	'!' UnaryExpression
	'~' UnaryExpression
	'#' UnaryExpression

PostfixExpression:
	PrimaryExpression
	PostfixExpression '[' Expression ']'
	PostfixExpression '.' Identifier
	PostfixExpression [':' Identifier] '(' [Expression {',' Expression}] ')'

PrimaryExpression:
	Identifier
	'null'
	'true'
	'false'
	'vararg'
	IntLiteral
	FloatLiteral
	CharLiteral
	StringLiteral
	'function' Parameters BlockStatement
	'class' [':' Expression] '{' {ClassMember} '}'
	'(' Expression ')'
	TableCtor
	ArrayCtor

TableCtor:
	'{' [TableField {',' TableField}] '}'

TableField:
	Identifier '=' Expression
	'[' Expression ']' '=' Expression
	SimpleFunctionDeclaration
	MethodDeclaration

ArrayCtor:
	'[' [Expression {',' Expression}] ']'