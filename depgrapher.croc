module depgrapher

import math: min
import regexp: Regexp

import string: StringBuffer

function as_(c: class) =
	\i: instance ->
		(i as c) !is null

local cats = 
{
	["__ignore"] =
	[
		"object"
	
		@"std..*"
		@"tango\..*"
		@"rt\..*"
	
		@"derelict\..*"

		@"croc\.api"
// 		@"croc\.base_.*"
// 		@"croc\.compiler.*"
// 		@"croc\.ex.*"
// 		@"croc\.stdlib_.*"
// 		@"croc\.types"
// 		@"croc\.types_.*"
// 		@"croc\.utils"

		"croc"
	]

// 	api =
// 	[
// 		@"croc\.api.*"
// 	]

	BaseLayer =
	[
		@"croc\.base.*"
		@"croc\.types.*"
		@"croc\.utils"
	]
	
	TopLayer =
	[
		@"croc\.stdlib.*"
		@"croc\.ex.*"
	]
	
	Compiler =
	[
		@"croc\.compiler.*"
	]
	
	Serialization =
	[
		@"croc\.serialization.*"
	]
	
	Misc =
	[
		@"croc\.interp.*"
		@"croc\.stackmanip"
		@"croc\.vm"
		@"croc\.api_checks"
		@"croc\.api_debug"
	]
}

function main()
{
	local e = Engine()

	foreach(name, patterns; cats)
	{
		local cat = e.addCategory(name)

		foreach(pat; patterns)
			cat.addPattern(pat)
	}

	e.readFile("deps.txt")
	e.writeGraphImg("Croc", "deps.png")
}

class Module
{
	name
	deps
	cycle
	category

	this(name: string)
	{
		:name = name
		:deps = {}
	}

	function dependsOn(m: Module)
		:deps[m] = true

	function opCmp(o: Module) =
		:name <=> o.name
}

class Category
{
	name
	patterns
	modules

	this(name: string)
	{
		:name = name
		:patterns = []
		:modules = []
	}

	function addPattern(pat: string)
	{
		if(!pat.startsWith("^"))
			pat = "^" ~ pat

		if(!pat.endsWith("$"))
			pat ~= "$"

		try
			:patterns ~= Regexp(pat)
		catch(e: Exception)
			throw Exception(format("Syntax error in pattern '{}'", pat))
	}
	
	function matchesModule(mod: string)
	{
		foreach(pat; :patterns)
			if(pat.test(mod))
				return true

		return false
	}

	function addModule(mod: Module)
	{
		:modules ~= mod
		mod.category = this
	}
}

class Engine
{
	categories
	allModules
	ignore
	uncat

	this()
	{
		:categories = {}
		:allModules = {}

		:ignore = :addCategory("__ignore")
		:uncat = :addCategory("__uncat")
	}

	// Add a category of the given name, or gets the existing Category object if it has already
	// been added.
	// Returns the corresponding Category object.
	function addCategory(name: string)
	{
		if(local ret = :categories[name])
			return ret

		local ret = Category(name)
		:categories[name] = ret
		return ret
	}

	// Add a module of the given name to the module pool, or gets the existing Module object
	// if it has already been added.
	// Returns the corresponding Module object, or null if the module is in the ignored category.
	function addModule(name: string)
	{
		if(local ret = :allModules[name])
		{
			if(ret.category is :ignore)
				return null
			else
				return ret
		}

		local ret = Module(name)
		:allModules[name] = ret

		local cat = :categorize(name)
		cat ?= :uncat
		cat.addModule(ret)

		if(cat is :ignore)
			return null
		else
			return ret
	}

	// Find which category the given name falls into.
	// If the name falls into 0 categories, returns null.
	// If the name falls into 1 category, returns that category.
	// Otherwise, throws an exception.
	function categorize(name: string)
	{
		local ret = null

		foreach(cat; :categories)
		{
			if(cat.matchesModule(name))
			{
				if(ret is null)
					ret = cat
				else
					throw Exception(format("Module '{}' matches both categories '{}' and '{}'", name, ret.name, cat.name))
			}
		}

		return ret
	}

	// Reads in a dependency file and builds up the dependency graph from it.
	function readFile(filename: string)
	{
		foreach(line; io.lines(filename))
		{
			local from, prot, to = line.split(" : ").expand()
			from = from[.. from.find(' ')]
			to = to[.. to.find(' ')]

			from = :addModule(from)
			to = :addModule(to)

			if(from is null || to is null)
				continue

			from.dependsOn(to)
		}

		:findCycles()
	}

	function buildDotFile(name: string)
	{
		local ret = StringBuffer(@'
digraph d
{
	fontname = Helvetica
	fontsize = 10
	label = "' ~ name ~ @'"
	rankdir = "TB"
	aspect = 1
	compound = true
	node [fontname = "Helvetica-Bold", fontsize = 12]
	'
		)

		local catDeps = {}
		foreach(cat; :categories)
			catDeps[cat] = {}

		ret.formatln("")

		local cycleColors = {}

		function cycleColor(c)
		{
			if(c !in cycleColors)
			{
// 				local r, g, b =
				cycleColors[c] = format("\"#{:x2}{:x2}{:x2}\"", math.rand(128) + 127, math.rand(128) + 127, math.rand(128) + 127)
			}

			return cycleColors[c]
		}

		foreach(cat; :categories)
		{
			if(cat is :ignore)
				continue
			else if(cat !is :uncat)
			{
				ret.append(@'
	subgraph cluster_' ~ cat.name ~ @'
	{
		fontname = "Helvetica-Bold"
		label = "' ~ cat.name ~ @'"
		fontsize = 15
		style = filled
		fillcolor = grey
	'
				)
			}

			foreach(mod; cat.modules)
				ret.formatln("\t\"{}\" [style = filled, fillcolor = {}]", mod.name, mod.cycle ? cycleColor(mod.cycle) : "grey")

			if(cat !is :uncat)
				ret.formatln("\t}")

			foreach(mod; cat.modules)
			{
				foreach(dep, _; mod.deps)
				{
					if(mod.category is dep.category)
						ret.formatln("\t\"{}\" -> \"{}\"", mod.name, dep.name)
					else
					{
						if(!catDeps[mod.category][dep.category])
						{
							catDeps[mod.category][dep.category] = true
							ret.formatln("\t\"{}\" -> \"{}\" [ltail = cluster_{}, lhead = cluster_{}]", mod.name, dep.name, mod.category.name, dep.category.name)
						}
					}
				}
			}
		}

		ret.append('}')

		return ret.toString()
	}

	function writeGraphImg(name: string, output: string)
	{
		local g = :buildDotFile(name)

		local p = os.Process()
		p.execute(["dot", "-Tpng", "-o" ~ output])
		p.stdin().write(g).close()
		io.stdout.copy(p.stdout())
		local reason, status = p.wait()

		if(reason != "exit")
			throw Exception(format("Could not execute dot process (reason: {}, return code: {})", reason, status))
	}

	function findCycles()
	{
		local curIndex = 0
		local index = {}
		local lowlink = {}
		local S = []

		function tarjan(v: Module)
		{
			index[v] = curIndex
			lowlink[v] = curIndex
			curIndex++
			S.append(v)

			foreach(w, _; v.deps)
			{
				if(w !in index)
				{
					tarjan(w)
					lowlink[v] = min(lowlink[v], lowlink[w])
				}
				else if(w in S)
					lowlink[v] = min(lowlink[v], index[w])
			}

			if(lowlink[v] == index[v])
			{
				local cycle = []

				do
				{
					local n = S.pop()
					cycle.append(n)
				} while(n !is v)

				if(#cycle > 1)
					foreach(mod; cycle)
						mod.cycle = cycle
			}
		}

		foreach(mod; :allModules)
			if(mod !in index)
				tarjan(mod)

		hash.clear(index)
		hash.clear(lowlink)
	}
}