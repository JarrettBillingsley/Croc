<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE language SYSTEM "language.dtd"
[
    <!ENTITY ident  "[a-zA-Z_][0-9a-zA-Z_]*"    >
    <!ENTITY digits "\d[\d_]*"                  >
    <!ENTITY bins   "[01_]+"                    >
    <!ENTITY hex    "[\da-fA-F]"                >
    <!ENTITY hexs   "[\da-fA-F_]+"              >
]>
<!--
    ========================================================================

    CROC.XML supports syntax highlighting for the Croc scripting language under Kate.

    Copyright (C) 2009 - Christopher Nicholson-Sauls <ibisbasenji@gmail.com>
    This code is released under the LGPL as part of kdelibs/kate.

    ========================================================================

    Croc is a scripting language which was conceived, written, and is maintained by
    Jarrett Billingsley. It is most closely related to Lua, with other influences from D,
    Squirrel, and Io and is dynamically typed with a C-style syntax and D-like (though
    not identical to D) semantics.

    The reference implementation is written in D and is designed with D's featureset in
    mind, in order to make integration of Croc into a host application seamless and easy.

    ========================================================================

    UPDATE HISTORY:
    2009.06.06 - MINID.XML 0.1      - Initial draft.
    2011.06.18 - CROC.XML  0.2      - Language name change.

    ========================================================================
-->

<language
    name="Croc"
    section="Scripts"
    extensions="*.croc"

    author="Christopher Nicholson-Sauls (ibisbasenji@gmail.com)"
    casesensitive="true"
    kateversion="3.2"
    license="LGPL"
    mimetype="text/x-crocsrc"
    version="0.1"
>

    <highlighting>
        <list name="keywords">
            <item> as </item>
            <item> assert </item>
            <item> break </item>
            <item> case </item>
            <item> catch </item>
            <item> class </item>
            <item> continue </item>
            <item> coroutine </item>
            <item> default </item>
            <item> do </item>
            <item> else </item>
            <item> false </item>
            <item> finally </item>
            <item> for </item>
            <item> foreach </item>
            <item> function </item>
            <item> global </item>
            <item> if </item>
            <item> import </item>
            <item> in </item>
            <item> is </item>
            <item> local </item>
            <item> module </item>
            <item> namespace </item>
            <item> null </item>
            <item> return </item>
            <item> scope </item>
            <item> super </item>
            <item> switch </item>
            <item> this </item>
            <item> throw </item>
            <item> true </item>
            <item> try </item>
            <item> vararg </item>
            <item> while </item>
            <item> yield </item>
        </list>
        <list name="cusses">
            <item> with </item>
        </list>

        <list name="param_keywords">
            <item> as </item>
            <item> coroutine </item>
            <item> false </item>
            <item> function </item>
            <item> in </item>
            <item> is </item>
            <item> namespace </item>
            <item> null </item>
            <item> super </item>
            <item> this </item>
            <item> true </item>
            <item> vararg </item>
            <item> with </item>
        </list>
        <list name="param_cusses">
            <item> assert </item>
            <item> break </item>
            <item> case </item>
            <item> catch </item>
            <item> class </item>
            <item> continue </item>
            <item> default </item>
            <item> do </item>
            <item> else </item>
            <item> finally </item>
            <item> for </item>
            <item> foreach </item>
            <item> global </item>
            <item> if </item>
            <item> import </item>
            <item> local </item>
            <item> module </item>
            <item> return </item>
            <item> scope </item>
            <item> switch </item>
            <item> throw </item>
            <item> try </item>
            <item> while </item>
            <item> yield </item>
        </list>

        <list name="param_types">
            <item> any </item>
            <item> array </item>
            <item> bool </item>
            <item> char </item>
            <item> class </item>
            <item> float </item>
            <item> function </item>
            <item> instance </item>
            <item> int </item>
            <item> namespace </item>
            <item> nativeobj </item>
            <item> null </item>
            <item> string </item>
            <item> table </item>
            <item> thread </item>
            <item> weakref </item>
        </list>

        <contexts>
            <!--==========================================================================
                TOP-LEVEL CONTEXT
            ===========================================================================-->
            <context attribute="Normal Text" lineEndContext="#stay" name="normal">
                <DetectSpaces />

                <StringDetect attribute="Keyword" context="function_def" String="function" />
                <keyword attribute="Keyword" context="#stay" String="keywords" />
                <keyword attribute="ERROR" context="#stay" String="cusses" />
                <RegExpr attribute="Decorator" context="decorator" String="@\s*&ident;" />
                <RegExpr attribute="Normal Text" context="#stay" String="&ident;" />

                <RegExpr attribute="Character" context="#stay" String="'.'" />

                <DetectChar attribute="String" context="string" char="&quot;" />
                <Detect2Chars attribute="String" context="wysiwyg" char="@" char1="&quot;" />
                <DetectChar attribute="String" context="alt_wysiwyg" char="`" />

                <StringDetect attribute="Region Marker" context="Region Marker" String="//BEGIN" beginRegion="Region1" firstNonSpace="true" />
                <StringDetect attribute="Region Marker" context="Region Marker" String="//END" endRegion="Region1" firstNonSpace="true" />

                <Detect2Chars attribute="Comment" context="comment_line" char="/" char1="/" />
                <Detect2Chars attribute="Comment" context="comment_block" char="/" char1="*" beginRegion="CommentBlock" />
                <Detect2Chars attribute="Comment" context="comment_nested" char="/" char1="+" beginRegion="CommentNested" />

                <RegExpr attribute="Float" context="#stay" String="(&digits;)?\.&digits;([eE][-+]?&digits;)?" />
                <RegExpr attribute="Float" context="#stay" String="&digits;[eE][-+]?&digits;" />

                <RegExpr attribute="Binary" context="#stay" String="0[bB]&bins;" />
                <RegExpr attribute="Hexadecimal" context="#stay" String="0[xX]&hexs;" />
                <RegExpr attribute="Decimal" context="#stay" String="&digits;" />

                <AnyChar attribute="Member Access" context="#stay" String=":." />

                <DetectChar attribute="Short Function" context="short_func" char="\" />
                <DetectChar attribute="Dollar" context="#stay" char="$" />

                <DetectChar attribute="Symbol" context="#stay" char="{" beginRegion="BraceA" />
                <DetectChar attribute="Symbol" context="#stay" char="}" endRegion="BraceA" />

                <AnyChar attribute="Symbol" context="#stay" String="~!#%^&amp;*()_+-={}[]|:;&lt;&gt;,.?/" />
            </context>

            <!--==========================================================================
                IDENTIFIERS, KEYWORDS, FUNCTIONS
            ===========================================================================-->
            <context attribute="Normal Text" lineEndContext="#stay" name="function_def">
                <DetectSpaces />

                <RegExpr context="#stay" String="&ident;" />
                <DetectChar attribute="Symbol" context="function_params" char="(" />
            </context>
            <context attribute="Normal Text" lineEndContext="#stay" name="function_params">
                <DetectSpaces />

                <RegExpr attribute="This:Class" context="#stay" String="this\s*:\s*class" />
                <RegExpr context="type_constraints" String="&ident;\s*:\s*" />
                <keyword attribute="Keyword" context="#stay" String="param_keywords" />
                <keyword attribute="ERROR" context="#stay" String="param_cusses" />
                <AnyChar attribute="Symbol" context="#stay" String="=," />
                <DetectChar attribute="Symbol" context="#pop#pop" char=")" />
            </context>
            <context attribute="Normal Text" lineEndContext="#stay" name="type_constraints">
                <StringDetect attribute="Type Constraints" context="#stay" String="!null" />
                <keyword attribute="Type Constraints" context="#stay" String="param_types" />
                <RegExpr attribute="Class Constraints" context="#stay" String="&ident;" />
                <DetectChar attribute="Symbol" context="#stay" char="|" />
                <AnyChar attribute="Symbol" context="#pop" String="=," />
                <DetectChar attribute="Symbol" context="#pop#pop#pop" char=")" />
            </context>

            <context attribute="Decorator" lineEndContext="#stay" name="decorator"  fallthrough="true" fallthroughContext="#pop">
                <RegExpr attribute="Decorator" context="#stay" String="\s*\.\s*&ident;" />
                <DetectChar attribute="Symbol" context="actual_params" char="(" />
            </context>

            <context attribute="Short Function" lineEndContext="#stay" name="short_func">
                <Detect2Chars attribute="Short Function" context="#pop" char="-" char1="&gt;" />
            </context>

            <context attribute="Normal Text" lineEndContext="#stay" name="actual_params" fallthrough="true" fallthroughContext="normal">
                <DetectSpaces />

                <StringDetect attribute="With Context" context="#stay" String="with &ident;" />
                <keyword attribute="Keyword" context="#stay" String="param_keywords" />
                <keyword attribute="ERROR" context="#stay" String="param_cusses" />
                <DetectChar attribute="Symbol" context="#stay" char="," />
                <DetectChar attribute="Symbol" context="#pop#pop" char=")" />
            </context>

            <!--==========================================================================
                REGIONS AND COMMENTS
            ===========================================================================-->
            <context attribute="Region Marker" lineEndContext="#pop" name="Region Marker">
            </context>
            <context attribute="Comment" lineEndContext="#pop" name="comment_line">
                <DetectSpaces />
                <StringDetect attribute="TODO" context="#stay" String="TODO" />
            </context>
            <context attribute="Comment" lineEndContext="#stay" name="comment_block">
                <DetectSpaces />
                <StringDetect attribute="TODO" context="#stay" String="TODO" />
                <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" endRegion="CommentBlock" />
            </context>
            <context attribute="Comment" lineEndContext="#stay" name="comment_nested">
                <DetectSpaces />
                <StringDetect attribute="TODO" context="#stay" String="TODO" />
                <Detect2Chars attribute="Comment" context="comment_nested" char="/" char1="+" beginRegion="CommentNested" />
                <Detect2Chars attribute="Comment" context="#pop" char="+" char1="/" endRegion="CommentNested" />
            </context>

            <!--==========================================================================
                STRINGS AND ESCAPES
            ===========================================================================-->
            <context attribute="String" lineEndContext="#stay" name="string">
                <DetectChar attribute="String" context="#pop" char="&quot;" />

                <RegExpr attribute="Escape Sequence" context="#stay" String="\\(['&quot;\\abfnrtv]|x&hex;{2}|u&hex;{4}|U&hex;{8})" />
            </context>
            <context attribute="String" lineEndContext="#stay" name="wysiwyg">
                <Detect2Chars attribute="Escape Sequence" context="#stay" char="&quot;" char1="&quot;" />
                <DetectChar attribute="String" context="#pop" char="&quot;" />
            </context>
            <context attribute="String" lineEndContext="#stay" name="alt_wysiwyg">
                <Detect2Chars attribute="Escape Sequence" context="#stay" char="`" char1="`" />
                <DetectChar attribute="String" context="#pop" char="`" />
            </context>
        </contexts>

        <itemDatas>
            <itemData name="Normal Text"        defStyleNum="dsNormal"          />
            <itemData name="TODO"               defStyleNum="dsAlert"           />
            <itemData name="ERROR"              defStyleNum="dsError"           />

            <itemData name="Binary"             defStyleNum="dsBaseN"           />
            <itemData name="Character"          defStyleNum="dsChar"            />
            <itemData name="Comment"            defStyleNum="dsComment"         />
            <itemData name="Decimal"            defStyleNum="dsDecVal"          />
            <itemData name="Decorator"          defStyleNum="dsOthers"          italic="true"   />
            <itemData name="Dollar"             defStyleNum="dsFunction"        bold="true"     />
            <itemData name="Member Access"      defStyleNum="dsOthers"          bold="true"     />
            <itemData name="Escape Sequence"    defStyleNum="dsString"          bold="true"     />
            <itemData name="Float"              defStyleNum="dsFloat"           />
            <itemData name="Hexadecimal"        defStyleNum="dsBaseN"           />
            <itemData name="Keyword"            defStyleNum="dsKeyword"         bold="true"     />
            <itemData name="Region Marker"      defStyleNum="dsRegionMarker"    />
            <itemData name="Short Function"     defStyleNum="dsOthers"          italic="true"   />
            <itemData name="String"             defStyleNum="dsString"          />
            <itemData name="Symbol"             defStyleNum="dsNormal"          />
            <itemData name="This:Class"         defStyleNum="dsOthers"          bold="true"     italic="true"   />
            <itemData name="Type Constraints"   defStyleNum="dsDataType"        bold="true"     italic="true"   />
            <itemData name="Class Constraints"  defStyleNum="dsDataType"        />
            <itemData name="With Context"       defStyleNum="dsOthers"          />
        </itemDatas>
    </highlighting>

    <general>
        <comments>
            <comment name="singleLine" start="//"/>
            <comment name="multiLine"  start="/*" end="*/" region="CommentNested"/>
            <comment name="multiLine"  start="/+" end="+/" region="CommentNested"/>
        </comments>

        <keywords casesensitive="true"/>
    </general>

</language>