module tools.stdlibdocs

import docs: docsOf
import doctools.output: SectionOrder, LinkResolver, LinkTranslator, OutputDocVisitor
import doctools.trac: TracWikiOutputter

function main()
{
	local t = CrocWikiLinkTranslator()
	local o = OutputDocVisitor(SectionOrder(), TracWikiOutputter$ CrocWikiLinkResolver$ t)

	o.visitItem(docsOf(glfw))

	t.printErrors()
}

local StdlibLookup =
{
	array         = "StdLib/ArrayLib"
	ascii         = "StdLib/AsciiLib"
	compiler      = "StdLib/CompilerLib"
	console       = "StdLib/ConsoleLib"
	debug         = "StdLib/DebugLib"
	docs          = "StdLib/DocsLib",
	["doctools.console"] = "StdLib/DoctoolsConsoleLib",
	["doctools.output" ] = "StdLib/DoctoolsOutputLib",
	["doctools.trac"   ] = "StdLib/DoctoolsTracLib"
	env           = "StdLib/EnvLib"
	exceptions    = "StdLib/ExceptionsLib"
	file          = "StdLib/FileLib"
	gc            = "StdLib/GcLib"
	hash          = "StdLib/HashLib"
	json          = "StdLib/JSONLib"
	math          = "StdLib/MathLib"
	memblock      = "StdLib/MemblockLib"
	modules       = "StdLib/ModulesLib"
	object        = "StdLib/ObjectLib"
	os            = "StdLib/OSLib"
	path          = "StdLib/PathLib"
	repl          = "StdLib/ReplLib"
	serialization = "StdLib/SerializationLib"
	stream        = "StdLib/StreamLib"
	string        = "StdLib/StringLib"
	text          = "StdLib/TextLib"
	thread        = "StdLib/ThreadLib"
	time          = "StdLib/TimeLib"

	devil         = "Addons/DevilLib"
	gl            = "Addons/GlLib"
	glfw          = "Addons/GlfwLib"
	openal        = "Addons/OpenalLib"
	pcre          = "Addons/PcreLib"
}

local StdExceptions =
{
	[name] = "StdLib/ExceptionsLib#" ~ name
	foreach name, cls; exceptions
	if isClass(cls)
}

class CrocWikiLinkResolver : LinkResolver
{
	_ggg

	override this(trans)
	{
		:_ggg = :_makeMapRec(docsOf(_G))
		(LinkResolver.constructor)(with this, trans)
	}

	override function enterModule(name: string)
	{
		if(name is "Misc Library")
			:_module = :_ggg
		else
			(LinkResolver.enterModule)(with this, name)
	}
}

class CrocWikiLinkTranslator : LinkTranslator
{
	_errors

	this()
		:_errors = []

	override function translateLink(mod: string, item: string)
	{
		if(mod is "" or mod is "Misc Library")
		{
			if(item is "")
				return "wiki:StdLib/MiscLib"
			else if(local ret = StdExceptions[item])
				return ret
			else if(item.startsWith("Vector"))
				return "wiki:StdLib/MiscLib/Vector#" ~ item
			else
				return "wiki:StdLib/MiscLib#" ~ item
		}
		else if(local ret = StdlibLookup[mod])
			return "wiki:" ~ ret ~ ((item is "") ? "" : "#" ~ item)

		throw ValueError("Unknown stdlib module '{}'".format(mod))
	}

	override function translateURI(uri: string) =
		uri

	override function invalidLink(link: string)
	{
		:_errors.append(link)
		return ""
	}

	function printErrors()
	{
		if(#:_errors == 0)
			return

		writeln()
		writeln("!!!!!!! Link resolution failures !!!!!!!")

		foreach(err; :_errors)
			writeln("   ", err)
	}
}