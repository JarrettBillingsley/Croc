module samples.interfaces

class Method
{
	_name
	_numParams

	this(name: string, numParams: int)
	{
		:_name = name
		:_numParams = numParams
	}

	function name() =
		:_name

	function implements(f: function) =
		f.numParams() == :_numParams

	function toString() =
		"{} ({} params)".format(:_name, :_numParams)
}

class Interface
{
	_name
	_methods
	_implementors

	this(name: string, methods: array)
	{
		if(!methods.all(\m -> m as Method))
			throw TypeError("All methods must be Methods")

		:_name = name
		:_methods = methods.dup()
		:_implementors = {}
	}

	function implement(T: class)
	{
		foreach(m; :_methods)
		{
			local name = m.name()

			if(!hasMethod(T, name) || !m.implements(T.(name)))
				throw TypeError("Class {} does not implement method '{}' from {}".format(nameOf(T), m, :_name))
		}

		:_implementors[T] = true
	}

	function opCall(val: instance)
	{
		if(superOf(val) not in :_implementors)
			:implement(superOf(val))

		return true
	}
}

function implements(T: class, vararg)
{
	for(i: 0 .. #vararg)
	{
		local p = vararg[i]

		if(!(p as Interface))
			throw TypeError("All varargs must be Interfaces")

		p.implement(T)
	}

	return T
}

local IStream = Interface("IStream",
[
	Method("read", 3)
	Method("write", 3)
	Method("seek", 2)
])

class DerpStream
{
	function read(m, offset, size) {}
	function write(m, offset, size) {}
	function seek(offset, whence) {}
}

function streamSomething(s: @IStream)
{
	s.read()
	writeln("yay!")
}

function main()
{
	local d = DerpStream()
	streamSomething(d)
}