module samples.simple

//import streams

function main()
{
	// foreach(c; text.getAllCodecs())
	// 	writeln(c)
	// writeln()

	local s = "oh \u00feello there!\uFEFF"

	foreach(codec; ["ascii", "latin-1", "utf-8", "utf-8-sig"])
	{
		writeln(codec)
		writeln$ s
		local c = text.getCodec(codec)
		local m = memblock.new(50)
		c.encodeInto(s, m, 0, "replace")
		writeln$ m
		local d = c.incrementalDecoder()

		local t = ""

		for(i: 0 .. #m, 3)
			t ~= d.decodeRange(m, i, i + 3 > #m ? i + 2 > #m ? i + 1 : i + 2 : i + 3)

		writeln(t, " ", s == t)

		// local t = c.decode(m)
		// writeln$ t, " ", s == t
		writeln()
	}
/*
	Process      (4 fields, 0 bytes)
	Regexp       (2 fields, 0 bytes)
	Streams      (well, will be replaced with NativeStream, which'll need like.. 1 field)
	StringBuffer (2 fields, 0 bytes)
	Timer        (1 field, 1 StopWatch that can be made a memblock field)
	Vector       (2 fields, 1 pointer to a TypeStruct..)
	Socket       (certainly gonna be changed)
	Regex        (2 fields, some extra gunk that can easily live in a memblock)
	SdlSurface   (1 pointer. C pointers could just be cast to integers in D and use nativeobjs in C)
*/
}