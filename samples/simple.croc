module samples.simple

//import streams

function main()
{
// 	registerCodec("ascii", AsciiCodec())

// 	local s = "hello there!"
// 	local asc = getCodec("ascii")
// 	local m = asc.encode(s, "replace")
// 	writeln$ m
// 	m[0] = 188
// 	local t = asc.decode(m, "replace")
// 	writeln$ t
}

import exceptions:
	BoundsException,
	LookupException,
	NotImplementedException,
	ParamException,
	TypeException,
	UnicodeException,
	ValueException

import string: StringBuffer

local textCodecs = {}

/**
Register a text codec of the given name. The codec can then be retrieved with \link{getCodec}.

\throws[exceptions.LookupException] if there is already a codec registered named \tt{name}.
*/
function registerCodec(name: string, codec: TextCodec)
{
	if(name in textCodecs)
		throw LookupException("Already a codec for '{}' registered".format(name))

	textCodecs[name] = codec
}

/**
Re-registers an already-registered codec with one or more alternate names.

For instance, if you wanted the codec "foobar" to be accessible also as "foo-bar" or "FOOBAR", you could use:

\code
aliasCodec("foobar", "foo-bar", "FOOBAR")
\endcode

Then \tt{getCodec("foo-bar")} and \tt{getCodec("FOOBAR")} would give the same codec as \tt{getCodec("foobar")}.

\param[name] is the name of the codec to alias. It must have been previously registered with \link{registerCodec}.
\param[vararg] is one or more strings that will be registered as aliases to the given codec.

\throws[exceptions.ParamException] if you don't pass at least one variadic argument.
\throws[exceptions.TypeException] if any of the variadic arguments are not strings.
*/
function aliasCodec(name: string, vararg)
{
	local c = getCodec(name)

	if(#vararg == 0)
		throw ParamException("Must have at least one variadic argument")

	for(i: 0 .. #vararg)
	{
		local rename = vararg[i]

		if(!isString(rename))
			throw TypeException("All variadic arguments must be strings")

		registerCodec(rename, c)
	}
}

/**
Gets the codec object that was registered with the given name.

\throws[exceptions.LookupException] if there was no codec registered with the given name.
*/
function getCodec(name: string)
{
	if(local ret = textCodecs[name])
		return ret

	throw LookupException("No codec registered for '{}'".format(name))
}

/**
Returns whether or not a codec of the given name has been registered.
*/
function hasCodec(name: string) =
	name in textCodecs

class TextCodec
{
	/**
	The name of the text encoding that this codec implements.
	*/
	name = ""

	/**
	Takes a string to encode, a memblock into which the encoded data is placed, and an index into the memblock where
	encoding should begin. The length of the memblock will be set to exactly long enough to contain the encoded data.
	The same memblock is returned.
	*/
	function encodeInto(str: string, dest: memblock, start: int, errors: string = "strict")
		throw NotImplementedException()

	/**
	Same as calling \link{encodeInto} with a new, empty memblock and a starting index of 0.
	*/
	function encode(str: string, errors: string = "strict") =
		:encodeInto(str, memblock.new(0), 0, errors)

	/**
	Takes a memblock and a range of characters to decode. Decodes the given range into a string, which is returned. If
	the given range is not consumed in its entirety, it is an error. If you need that behavior -- and about the only
	time that you would is in a "stream decoding" situation -- that's what \link{incrementalDecoder} is for.
	*/
	function decodeRange(src: memblock, lo: int, hi: int, errors: string = "strict")
		throw NotImplementedException()

	/**
	Same as calling \link{decodeRange} with a slice of the entire memblock.
	*/
	function decode(src: memblock, errors: string = "strict") =
		:decodeRange(src, 0, #src, errors)

	/**
	Returns a new instance of a class derived from \link{IncrementalEncoder} that allows you to encode a stream of text
	incrementally -- that is, when the end of a string is reached, the encoder preserves any state that it needs so that
	another string can be encoded after it and treated as a continuation.
	*/
	function incrementalEncoder(errors: string = "strict")
		throw NotImplementedException()

	/**
	Returns a new instance of a class derived from \link{IncrementalDecoder} that allows you to decode a stream of text
	incrementally -- that is, when the end of the memblock range is reached, the decoder preserves any state that it
	needs so that another piece of memblock can be decoded after it and treated as a continuation.
	*/
	function incrementalDecoder(errors: string = "strict")
		throw NotImplementedException()
}

class IncrementalEncoder
{
	/**
	The error behavior of an incremental encoder is specified only once, when it's first constructed.
	*/
	this(errors: string = "strict")
		throw NotImplementedException()

	/**
	Like \link{TextCodec.encodeInto}, but works a bit differently. The \tt{final} parameter tells the function whether
	or not this is the last piece of string to be encoded. This way the encoder can throw an error if there's
	insufficient input or whatever.

	Returns three things: \tt{dest}, the number of characters consumed from \tt{str}, and the index in \tt{dest} after
	the last encoded character (that is, you could then pass that index as the \tt{start} of another call to this
	function).
	*/
	function encodeInto(str: string, dest: memblock, start: int, final: bool = false)
		throw NotImplementedException()

	/**
	Same as caling \link{encodeInto} with a new, empty memblock and a starting index of 0.
	*/
	function encode(str: string, final: bool = false) =
		:encodeInto(str, memblock.new(0), 0, final)

	/**
	Resets any internal state to its initial state so that this encoder object can be used to encode a new string.
	*/
	function reset()
		throw NotImplementedException()
}

class IncrementalDecoder
{
	/**
	The error behacior of an incremental decoder is specified only once, when it's first constructed.
	*/
	this(errors: string = "strict")
		throw NotImplementedException()

	/**
	Like \link{TextCodec.decodeRange}, but works a bit differently. The \tt{final} parameter tells the function whether
	or not this is the last piece of data to be decoded. This way the decoder can throw an error if there's insufficient
	input or whatever.

	Returns two things: a string representing the portion of \tt{src} that was decoded, and the index in \tt{src} after
	the last decoded byte (that is, you could then pass that index as the \tt{lo} of another call to this function).
	*/
	function decodeRange(src: memblock, lo: int, hi: int, final: bool = false)
		throw NotImplementedException()

	/**
	Same as calling \link{decodeRange} with a slice of the entire memblock.
	*/
	function decode(src: memblock, final: bool = false) =
		:decodeRange(src, 0, #src, final)

	/**
	Resets any internal state to its initial state so that this decoder object can be used to decode a new string.
	*/
	function reset()
		throw NotImplementedException()
}

class AsciiCodec : TextCodec
{
	name = "ascii"

	function encodeInto(str: string, dest: memblock, start: int, errors: string = "strict")
	{
		if(start < 0) start += #dest
		if(start < 0 || start > #dest)
			throw BoundsException("Invalid start index {} for memblock of length {}".format(start, #dest))

		local i = start
		#dest = math.max(#dest, #str + start)

		foreach(j, ch; str)
		{
			local c = toInt(ch)

			if(c > 0x7f)
			{
				if(errors is "strict")
					throw UnicodeException("Character {} cannot be encoded as ASCII as its codepoint (U+{:X6}) is above U+00007F".format(j, c))
				else if(errors is "ignore")
					continue
				else if(errors is "replace")
					c = 63 // '?'
				else
					throw ValueException("Invalid error handling type '{}'".format(errors))
			}

			dest[i] = c
			i++;
		}

		#dest = start + i
		return dest
	}

	function decodeRange(src: memblock, lo: int, hi: int, errors: string = "strict")
	{
		if(lo < 0) lo += #src
		if(hi < 0) hi += #src
		if(lo < 0 || lo > hi || hi > #src)
			throw BoundsException("Invalid slice indices ({} .. {}) for memblock of length {}".format(lo, hi, #src))

		local s = StringBuffer(#src)

		for(i: lo .. hi)
		{
			local c = src[i]

			if(c > 0x7f)
			{
				if(errors is "strict")
					throw UnicodeException("Character at byte offset {} is invalid ASCII as its value (0x{:X2}) is above 0x7F".format(i, c))
				else if(errors is "ignore")
					continue
				else if(errors is "replace")
					c = 0xFFFD
				else
					throw ValueException("Invalid error handling type '{}'".format(errors))
			}

			s.append(toChar(c))
		}

		return s.toString()
	}
}