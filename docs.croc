module docs

local _docs = {}

_G.("_doc_") = function _doc(val, doctable: table, vararg)
{
	for(i: 0 .. #vararg)
		doctable = doctable.children[vararg[i]]

	_docs[weakref(val)] = doctable

	return val
}

_G.docsOf = function docsOf(val) =
	weakref(val) in _docs ? _docs[weakref(val)] : {}

/*
function help(obj, output = consoleOutput)
{
	if(local docs = tab[weakref(obj)])
		outputHelp(obj, docs, output)
	else
		writeln("<no help available>")
}

global consoleOutput =
{
	function header(type: string, name: string)
		writefln("{} {}\n", type, name)

	function paragraph(pgph: string)
		writeln(pgph, "\n")

	function beginShortDesc() {}
	function endShortDesc() {}

	function beginDesc() {}
	function endDesc() {}

	function beginParams()
		writeln("Parameters:")

	function endParams()
		writeln()

	function param(name: string, type: string|null, desc: string)
	{
		writefln("  {}{}", name, type ? ": " ~ type : "")
		writefln("    {}", desc)
	}

	function beginReturns()
		writeln("Returns:")

	function endReturns()
		writeln()

	function beginSection(header: string)
		writefln("{}:", header)

	function endSection(header: string) {}
}

global tracWikiOutput =
{
	function header(type: string, name: string)
		writefln("== {} {} ==\n", type, name)
	
	function paragraph(pgph: string)
		writeln(pgph, "\n")

	function beginShortDesc() {}
	function endShortDesc() {}

	function beginDesc() {}
	function endDesc() {}

	function beginParams()
		writeln("'''Parameters:'''\n||'''Name'''||'''Type'''||'''Description'''||")

	function endParams()
		writeln()

	function param(name: string, type: string|null, desc: string)
		writefln("||{}||{}||{}||", name, type ? type : "", desc)

	function beginReturns()
		write("'''Returns:''' ")

	function endReturns()
		writeln()

	function beginSection(header: string)
		writefln("{}:\n", header)

	function endSection(header: string) {}
}

function outputHelp(obj, docs: string, output: table)
{
	Outputter(obj, docs, output).run()
}

class Outputter
{
	obj
	docs
	out
	l = 0
	buf

	this(obj, docs: string, out: table)
	{
		:obj = obj
		:docs = docs.splitLines().apply(\s -> s.strip())
		:out = out
		:buf = StringBuffer()
	}

	function run()
	{
		:out.header(typeof(:obj), nameOf(:obj))

		:eatBlankLines()
		:shortDesc()
		:longDesc()

		while(:l < #:docs)
		{
			if(:isSectionHeader())
			{
				switch(:docs[:l][..-1])
				{
					case "Params":  :params(); break
					case "Returns": :returns(); break
					default:        :otherSection(); break
				}
			}
			else
			{
				// ??
				:l++
			}
		}
	}

	function shortDesc()
	{
		:out.beginShortDesc()

		if(:l < #:docs && !:isSectionHeader())
			:out.paragraph(:readParagraph())

		:out.endShortDesc()
	}

	function longDesc()
	{
		:out.beginDesc()

		while(:l < #:docs && !:isSectionHeader())
			:out.paragraph(:readParagraph())

		:out.endDesc()
	}
	
	function params()
	{
		:l++
		:eatBlankLines()
		:out.beginParams()

		while(:l < #:docs && !:isSectionHeader())
			:out.param(:readParam())

		:out.endParams()
	}
	
	function returns()
	{
		:l++
		:eatBlankLines()
		:out.beginReturns()
		:readParagraphs()
		:out.endReturns()
	}
	
	function otherSection()
	{
		local name = :docs[:l][..-1]
		:l++
		:eatBlankLines()
		:out.beginSection(name)
		:readParagraphs()
		:out.endSection(name)
	}

	function readParam()
	{
		local name, type, desc
		local seenEquals = false

		#:buf = 0

		while(:l < #:docs && !:isSectionHeader())
		{
			if('=' in :docs[:l])
			{
				if(seenEquals)
					break
				else
					seenEquals = true
			}

			:buf.append(:docs[:l], " ")
			:l++
		}
		
		if(!seenEquals)
			return "<malformed docs>", null, ""

		desc = :buf.toString()
		local pos = desc.find('=')
		name = desc[.. pos].strip()
		desc = desc[pos + 1..].strip()
		pos = name.find(':')
		
		if(pos != #name)
		{
			type = name[pos + 1..].strip()
			name = name[..pos].strip()
		}

		return name, type, desc
	}

	function eatBlankLines()
	{
		while(:l < #:docs && #:docs[:l] == 0)
			:l++
	}

	function isSectionHeader()
	{
		if(:l >= #:docs)
			return false

		local line = :docs[:l]
		return #line > 0 && line[0].isUpper() && line[-1] == ':'
	}

	function isBlank() =
		:l >= #:docs ? false : #:docs[:l] == 0

	function readParagraph()
	{
		#:buf = 0

		while(:l < #:docs && !:isSectionHeader() && !:isBlank())
		{
			:buf.append(:docs[:l], " ")
			:l++
		}

		:eatBlankLines()
		return :buf.toString().strip()
	}
	
	function readParagraphs()
	{
		while(:l < #:docs && !:isSectionHeader())
			:out.paragraph(:readParagraph())
	}
}*/