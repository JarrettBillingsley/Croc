/** This module implements a simple REPL (read-eval-print loop) which is agnostic to input and output. This is what the
interactive Croc interpreter uses. */
module repl

/** This is the type of the 'exit' global object which \link{interactive} inserts into the global namespace. It's not
exported as a global, but some of its methods are used publicly anyway. */
local class ExitObj
{
	_running
	_orig

	this(running: array, orig)
	{
		:_running = running
		:_orig = orig
	}

	/** \returns a message telling how to end the REPL. */
	function toString() =
		'Use "exit()" or Ctrl+D<enter> to end.'

	/** Calling an instance of this object causes the REPL to terminate. */
	function opCall()
		:_running[0] = false

	/** If there was already an 'exit' in the global namespace when the REPL started, this method will return the value
	of that object; otherwise, returns null. */
	function original()
		return :_orig
}
object.freeze(ExitObj)

local OldExits = []

local function _setupExit(running: array)
{
	if("exit" in _G)
	{
		OldExits.append(_G.exit)
		_G.exit = ExitObj(running, _G.exit)
		return true
	}
	else
	{
		_G.exit = ExitObj(running)
		return false
	}
}

local function _cleanupExit(replacedExit: bool)
{
	if(replacedExit)
		_G.exit = OldExits.pop()
	else if("exit" in _G)
		hash.remove(_G, "exit")
}

local function _couldBeDecl(buffer: string)
{
	local b = buffer.lstrip()

	return b.startsWith("local") or
		b.startsWith("global") or
		b.startsWith("function") or
		b.startsWith("class") or
		b.startsWith("namespace") or
		b.startsWith("@") or
		b.startsWith("///") or
		b.startsWith("/**")
}

local function _printTraceback(inout, e)
{
	if(#e.traceback > 1)
	{
		local runEntry = #e.traceback

		for(i: 0 .. #e.traceback)
		{
			if(e.traceback[i].file.startsWith("repl._run"))
			{
				runEntry = i
				break
			}
		}

		if(runEntry > 0)
		{
			e.traceback = e.traceback[0 .. runEntry]
			inout.writeln(e.tracebackString())
		}
	}
}

local function _run(inout, fd: funcdef)
{
	try
	{
		if(hasMethod(inout, "run"))
			return true, inout.run(fd)
		else
			return true, fd.close(_G)()
	}
	catch(e: HaltException)
		throw e
	catch(e)
	{
		inout.writeln(e)
		_printTraceback(inout, e)
		inout.writeln()
	}

	return false
}

local function _tryAsStatement(inout, buffer: string, ex = null)
{
	local fd, why = compiler.compileStmts(buffer, "<REPL>")

	if(not isFuncdef(fd))
	{
		if(why is "unexpectedeof" or why is "danglingdoc")
			return true, fd
		else if(why is "lonestatement" and ex is not null)
		{
			inout.writeln("When attempting to evaluate as an expression:")
			inout.writeln(ex)
			inout.writeln("When attempting to evaluate as a statement:")
		}

		inout.writeln(fd)
		inout.writeln()
		return false
	}

	_run(inout, fd)
	return false
}

local function _tryAsExpression(inout, buffer: string)
{
	local fd, why = compiler.compileExpr(buffer, "<REPL>")

	if(not isFuncdef(fd))
	{
		if(why is "unexpectedeof")
			return true, fd

		return _tryAsStatement(inout, buffer, fd)
	}

	local rets = [_run(inout, fd)]

	if(rets[0] && #rets > 1)
	{
		inout.write(" => ")
		local first = true

		foreach(ret; rets[1 ..])
		{
			if(first)
				first = false
			else
				inout.write(", ")

			dumpVal(ret, false)
		}

		inout.writeln()
	}

	return false
}

/** Runs a string as if it were typed into a REPL. If it looks like a delcaration of some kind, tries to parse and run
it as a statement; otherwise, tries to parse and run it as an expression first, falling back to parsing it as a
statement if that fails.

The string will be executed in the global environment, unless \tt{inout} implements a \tt{run} method, in which case
it's \tt{inout}'s responsibility to choose which environment to execute it in.

\param[inout] should be an already-initialized object of the same kind you pass to \link{interactive}.
\param[buffer] should contain the code to be run.

\returns two values.

The first is a bool telling whether or not more text is needed to be typed to make the code compile. That is, if this
returns \tt{true}, it means \tt{buffer} does not contain a complete statement or expression. Returning \tt{false}
does not mean the code executed successfully, only that it compiled successfully.

The second is the compilation exception object if the first value was \tt{true}, and \tt{null} otherwise.*/
function runString(inout, buffer: string)
{
	local needMore, ex

	if(_couldBeDecl(buffer))
		needMore, ex = _tryAsStatement(inout, buffer)
	else
		needMore, ex = _tryAsExpression(inout, buffer)

	if(needMore)
		return true, ex
	else
		return false
}

local runString = runString
local Prompt1 = ">>> "
local Prompt2 = "... "

/** Runs a REPL using the given \tt{inout} object to perform textual input and output.

The \tt{inout} object must implement the following methods:

\blist
	\li \b{\tt{write(vararg)}}: take a variadic number of strings, and output them.
	\li \b{\tt{writeln(vararg)}}: same as \tt{write}, but also output a newline afterwards.
	\li \b{\tt{readln(prompt: string)}}: display a prompt with the text \tt{prompt}, read text from the user, and return
		it as a string. Can also return \tt{null} to mean that the REPL should stop.
\endlist

The \tt{inout} object may optionally implement the following methods:

\blist
	\li \b{\tt{init()}}: called once before calling any other methods, allows it to initialize any state needed.
	\li \b{\tt{cleanup()}}: called once when the REPL stops for any reason, allows it to do any cleanup needed.
	\li \b{\tt{run(f: funcdef)}}: called with a funcdef which is the compiled version of the entered code. Should return
		all results from calling the function resulting from closing \tt{f}.
\endlist

The operation of this function goes something like this:

\nlist
	\li If any exists, the \tt{init} method is called on \tt{inout}.
	\li An \link[ExitObj]{'exit' object} is set up in the global namespace to allow the user to stop the REPL by calling
		it. Any existing global named 'exit' is saved.
	\li A message is printed to \tt{inout} telling how to stop the REPL.
	\li The REPL enters its loop.
	\nlist
		\li It calls \tt{inout.readln} to get a line of text.
		\li If \tt{inout.readln} returns \tt{null} or a string that contains ASCII 4 (Ctrl+D), the loop ends.
		\li It builds up a buffer from the lines of text returned by \tt{inout.readln}, calling \link{runString} on
			the buffer until it no longer wants any more text, at which point the buffer is emptied.
		\li If \tt{exit()} has been called, the loop ends.
	\endlist
	\li This step happens even if an exception occurred: If there was an existing 'exit' global, it is restored. Then
		\tt{inout}'s \tt{cleanup} method, if one exists, is called.
\endlist*/
function interactive(inout)
{
	if(hasMethod(inout, "init"))
		inout.init()

	local running = [true]
	local replacedExit = _setupExit(running)

	scope(exit)
	{
		_cleanupExit(replacedExit)

		if(hasMethod(inout, "cleanup"))
			inout.cleanup()
	}

	inout.writeln("Use exit() or Ctrl+D<Enter> to end.")
	local prompt = Prompt1
	local buffer = ""

	while(running[0])
	{
		// Get input
		local line = inout.readln(prompt)

		if(line is not null and not isString(line))
			throw TypeError("inout.readln expected to return string|null, not '{}'".format(niceTypeof(line)))

		// End? (\x04 is Ctrl+D)
		if(line is null or '\x04' in line)
			break

		if(#buffer == 0 and #line.strip() == 0)
		{
			prompt = Prompt1
			continue
		}

		if(#buffer == 0)
			buffer ~= line
		else
			buffer ~= '\n' ~ line

		// Execute
		if(runString(inout, buffer))
			prompt = Prompt2
		else
		{
			prompt = Prompt1
			buffer = ""
		}
	}
}

/** This class is an input/output object which reads from and writes to the standard input and output streams in the
\link{console} module. Just pass this class as the parameter to \link{interactive} to start an interactive prompt on the
console, like \tt{repl.interactive(repl.ConsoleInout)}. */
class ConsoleInout
{
	function readln(prompt: string)
	{
		console.stdout.write(prompt)
		console.stdout.flush()
		return console.stdin.readln()
	}
}

object.addMethod(ConsoleInout, "write", console.write)
object.addMethod(ConsoleInout, "writeln", console.writeln)
object.freeze(ConsoleInout)