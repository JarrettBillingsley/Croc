/**
This module contains a powerful means of serializing arbitrary Croc object graphs to and from streams.
*/
module serialization

local InStream =      stream.InStream
local OutStream =     stream.OutStream
local BinaryStream =  stream.BinaryStream
local intMin =        math.intMin
local intSize =       math.intSize
local floatSize =     math.floatSize
local getCodec =      text.getCodec
local toUpper =       ascii.toUpper
local addMethod =     object.addMethod
local isFrozen =      object.isFrozen
local isFinalizable = object.isFinalizable
local methodsOf =     object.methodsOf
local memblock_new =  memblock.new
local hash_clear =    hash.clear

local function capital(s) =
	toUpper(s[0]) ~ s[1..]

local function addMethods(C: class, methods: table)
{
	foreach(name, func; methods)
		addMethod(C, name, func)

	return C
}

local TypeTags = _serializationtmp.TypeTags
local RevTypeTags = {[v] = k foreach k, v; TypeTags}
local SerializeMethods = {[type] = "_serialize" ~ capital(type) foreach type, _; TypeTags}
local DeserializeMethods = {[tag] = "_deserialize" ~ capital(type) ~ "Impl" foreach tag, type; RevTypeTags}
local IntBitSize = intSize * 8
local Endianness = _serializationtmp.Endianness
local PlatformBits = _serializationtmp.PlatformBits
local ModuleFourCC = getCodec("ascii").encode("Croc")

// This gets bumped any time the serialization format changes.
local SerialVersion = 1

local utf8 = getCodec("utf-8")

/*
Methods used by Serializer
	writeUInt8
	writeExact
	flush
	writeFloat64

Methods used by Deserializer
	readUInt8
	readFloat64
	readExact
*/

@addMethods(_serializationtmp.ExtraSerializeMethods)
local class Serializer
{
	_output
	_strBuf
	_objTable
	_objIndex = 0
	_trans
	_serializeFunc
	_rawBuf

	this(output: @OutStream)
	{
		if(output.super is BinaryStream)
			:_output = output
		else
			:_output = BinaryStream(output)

		:_strBuf = memblock_new(256)
		local self = this
		:_serializeFunc = \val { self._serialize(val) }
		:_rawBuf = memblock_new(0)
	}

	function writeGraph(val, transients: table|instance)
	{
		if(val is transients)
			throw ValueError("Object to serialize is the same as the transients table")

		:_trans = transients
		:_objTable = {}
		:_objIndex = 0

		scope(exit)
			hash_clear(:_objTable)

		:_writeSignature()
		:_serialize(val)
		:_output.flush()
	}

	function _writeSignature()
	{
		:_output.writeUInt8(Endianness)
		:_integer(PlatformBits)
		:_integer(intSize)
		:_integer(floatSize)
		:_integer(SerialVersion)
	}

	function _tag(v: int)
		:_output.writeUInt8(v)

	function _integer(v: int)
	{
		local o = :_output

		do
		{
			local b = v & 0x7F
			v >>= 7
			local more = !((v == 0 && ((b & 0x40) == 0)) || (v == -1 && ((b & 0x40) != 0)))

			if(more)
				b |= 0x80

			o.writeUInt8(b)
		} while(more)
	}

	function _serialize(val)
	{
		if(local replacement = :_trans[val])
		{
			:_tag(TypeTags["transient"])
			:_serialize(replacement)
			return
		}

		local method = SerializeMethods[typeof(val)]
		assert(method !is null, "t: " ~ typeof(val))
		return :(method)(val)
	}

	function _serializeNull(_)
		:_tag(TypeTags["null"])

	function _serializeBool(v)
	{
		:_tag(TypeTags["bool"])
		:_output.writeUInt8(v as int)
	}

	function _serializeInt(v)
	{
		:_tag(TypeTags["int"])
		:_integer(v)
	}

	function _serializeFloat(v)
	{
		:_tag(TypeTags["float"])
		:_output.writeFloat64(v)
	}

	function _serializeNativeobj(v)
		throw TypeError("Attempting to serialize a nativeobj. Please use the transients table.")

	function _serializeString(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["string"])
		local buf = :_strBuf
		utf8.encodeInto(v, buf, 0)
		:_integer(#buf)
		:_output.writeExact(buf)
	}

	function _serializeWeakref(v)
	{
		// although weakrefs are implemented as objects, their value-ness means that really the only way to properly
		// serialize/deserialize them is to treat them like a value: just embed them every time they show up.

		:_tag(TypeTags["weakref"])

		local obj = deref(v)

		if(obj is null)
			:_output.writeUInt8(0)
		else
		{
			:_output.writeUInt8(1)
			:_serialize(obj)
		}
	}

	function _serializeTable(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["table"])
		:_integer(#v)

		foreach(key, val; v)
		{
			:_serialize(key)
			:_serialize(val)
		}
	}

	function _serializeNamespace(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["namespace"])
			:_serialize(nameOf(v))

		if(v.super is null)
			:_output.writeUInt8(0)
		else
		{
			:_output.writeUInt8(1)
			:_serialize(v.super)
		}

		:_integer(#v)

		foreach(key, val; v)
		{
			:_serialize(key)
			:_serialize(val)
		}
	}

	function _serializeArray(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["array"])
		:_integer(#v)

		foreach(val; v)
			:_serialize(val)
	}

	function _serializeMemblock(v)
	{
		if(:_alreadyWritten(v))
			return

		if(!v.ownData())
			throw ValueError("Attempting to serialize a memblock which does not own its data")

		:_tag(TypeTags["memblock"])
		:_integer(#v)
		:_output.writeExact(v)
	}

	function _serializeFunction(v)
	{
		if(:_alreadyWritten(v))
			return

		if(v.isNative())
			throw ValueError("Attempting to serialize a native function '{}'".format(nameOf(v)))

		:_tag(TypeTags["function"])
		:_nativeSerializeFunction(v)
	}

	function _serializeFuncdef(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["funcdef"])
		:_nativeSerializeFuncdef(v)
	}

	function _serializeClass(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["class"])
		:_serialize(nameOf(v))

		// TODO: relax the finalizer restriction, since finalizers aren't "native-only" any more
		if(isFrozen(v) && isFinalizable(v))
			throw ValueError("Attempting to serialize class '{}' which has a finalizer".format(nameOf(v)))

		:_nativeSerializeClass(v)
		:_output.writeUInt8(isFrozen(v) as int)
	}

	function _serializeInstance(v)
	{
		if(:_alreadyWritten(v))
			return

		:_tag(TypeTags["instance"])
		:_integer(:_instSize(v)) // have to do this so we can deserialize properly
		:_serialize(v.super)

		if(hasField(v, "opSerialize") || hasMethod(v, "opSerialize"))
		{
			local s = v.opSerialize

			if(isFunction(s))
			{
				:_output.writeUInt8(1)
				v.opSerialize(:_output, :_serializeFunc)
				return
			}
			else if(isBool(s))
			{
				if(!s)
					throw ValueError(
						"Attempting to serialize '{}' whose opSerialize field is false".format(rawToString(v)))
				// fall out, serialize literally
			}
			else
			{
				throw TypeError(
					"Attempting to serialize '{}' whose opSerialize field is '{}', not bool or function".format(
					rawToString(v), niceTypeof(s)))
			}
		}

		// TODO: relax the finalizer restriction, since finalizers aren't "native-only" any more
		if(isFinalizable(v))
			throw ValueError("Attempting to serialize '{}' which has a finalizer".format(rawToString(v)))

		:_output.writeUInt8(0)
		:_nativeSerializeInstance(v)
	}

	function _serializeThread(v)
		throw TypeError("Attempting to serialize a thread. Please use the transients table.")
	// {
	// 	if(:_alreadyWritten(v))
	// 		return

	// 	:_tag(TypeTags["thread"])

	// 	:_nativeSerializeThread(v)
	// }

	function _alreadyWritten(v)
	{
		if(local idx = :_objTable[v])
		{
			:_tag(TypeTags["backref"])
			:_integer(idx)
			return true
		}

		// writefln("objTable[{}] = {}", typeof(v), :_objIndex)

		:_objTable[v] = :_objIndex
		:_objIndex++
		return false
	}
}

@addMethods(_serializationtmp.ExtraDeserializeMethods)
local class Deserializer
{
	_input
	_strBuf
	_objTable
	_trans
	_deserializeFunc
	_rawBuf
	_dummyObj

	this(input: @InStream)
	{
		if(input.super is BinaryStream)
			:_input = input
		else
			:_input = BinaryStream(input)

		:_strBuf = memblock_new(256)
		local self = this
		:_deserializeFunc = \type -> self._deserializeCB(type)
		:_rawBuf = memblock_new(0)
	}

	function _readSignature()
	{
		local endian = :_input.readUInt8()

		if(endian != Endianness)
			throw ValueError("Data was serialized with a different endianness")

		local bits = :_integer()

		if(bits != PlatformBits)
		{
			throw ValueError(
				"Data was serialized on a {}-bit platform; this is a {}-bit platform".format(bits, PlatformBits))
		}

		local size = :_integer()

		if(size != intSize)
		{
			throw ValueError(
				"Data was serialized from a Croc build with {}-bit ints; this build has {}-bit ints".format(
				size, intSize))
		}

		size = :_integer()

		if(size != floatSize)
		{
			throw ValueError(
				"Data was serialized from a Croc build with {}-bit floats; this build has {}-bit floats".format(
				size, floatSize))
		}

		local version = :_integer()

		if(version != SerialVersion)
			throw ValueError("Data was serialized from a Croc build with a different serial data format")
	}

	function _integer()
	{
		local i = :_input
		local ret = 0
		local shift = 0
		local b

		while(true)
		{
			if(shift >= IntBitSize)
				throw ValueError("Malformed data (overlong integer)")

			b = i.readUInt8()
			ret |= (b & 0x7F) << shift
			shift += 7

			if((b & 0x80) == 0)
				break
		}

		if(shift < IntBitSize && (b & 0x40))
			ret |= -(1 << shift)

		return ret
	}

	function _length()
	{
		local ret = :_integer()

		if(ret < 0 || ret > 0xFFFFFFFF)
			throw ValueError("Malformed data (length field has a value of {})".format(ret))

		return ret
	}

	function _tag() =
		:_input.readUInt8()

	function _checkTag(wanted: int)
	{
		local read = :_tag()

		if(read != wanted)
		{
			local w = RevTypeTags[wanted]
			local r = RevTypeTags[read]

			if(r is null)
				throw ValueError("Malformed data (expected type '{}' but found garbage instead)".format(w))
			else
				throw ValueError("Malformed data (expected type '{}' but found '{}' instead)".format(w, r))
		}
	}

	function _checkObjTag(wanted: int)
	{
		local w = RevTypeTags[wanted]
		local t = :_tag()
		local val

		if(t == wanted)
			return null
		else if(t == TypeTags["backref"])
			val = :_deserializeBackrefImpl()
		else if(t == TypeTags["transient"])
			val = :_deserializeTransientImpl()
		else
		{
			local r = RevTypeTags[t]

			if(r is null)
				throw ValueError("Malformed data (expected object of type '{}' but found garbage instead)".format(w))
			else
				throw ValueError("Malformed data (expected object of type '{}' but found '{}' instead)".format(r))
		}

		if(typeof(val) !is w)
		{
			throw ValueError("Malformed data (expected type '{}' but found a backref to type '{}' instead)".format(
				w, niceTypeof(val)))
		}

		return val
	}

	function _addObject(val)
	{
		// writefln("add: objTable[{}] = {}", #:_objTable, typeof(val))
		:_objTable.append(val)
		return val
	}

	// callback function given to opDeserialize methods
	function _deserializeCB(type: string|null)
	{
		if(type is null)
			return :_deserialize()
		else if(local wanted = TypeTags[type])
		{
			if(local val = :_checkObjTag(wanted))
				return val
			else
				return :(DeserializeMethods[wanted])()
		}
		else
			throw ValueError("Invalid requested type '{}'".format(type))
	}

	function _deserialize()
	{
		local method = DeserializeMethods[:_tag()]

		if(method is null)
			throw ValueError("Malformed data (invalid type tag)")

		return :(method)()
	}

	function _deserializeTransientImpl()
	{
		local key = :_deserialize()
		local ret = :_trans[key]

		if(ret is null)
			throw ValueError("Malformed data or invalid transient table (transient key {r} does not exist)".format(key))

		return ret
	}

	function _deserializeBackrefImpl()
	{
		local idx = :_integer()

		if(idx < 0 || idx >= #:_objTable)
			throw ValueError("Malformed data (invalid back-reference)")

		return :_objTable[idx]
	}

	function _deserializeNull()      { :_checkTag(TypeTags["null"]);  return :_deserializeNullImpl()  }
	function _deserializeBool()      { :_checkTag(TypeTags["bool"]);  return :_deserializeBoolImpl()  }
	function _deserializeInt()       { :_checkTag(TypeTags["int"]);   return :_deserializeIntImpl()   }
	function _deserializeFloat()     { :_checkTag(TypeTags["float"]); return :_deserializeFloatImpl() }

	function _deserializeWeakref()   { :_checkTag(TypeTags["weakref"]); return :_deserializeWeakrefImpl() } // weirdo

	function _deserializeString()    { return :_checkObjTag(TypeTags["string"])    || :_deserializeStringImpl()    }
	function _deserializeTable()     { return :_checkObjTag(TypeTags["table"])     || :_deserializeTableImpl()     }
	function _deserializeNamespace() { return :_checkObjTag(TypeTags["namespace"]) || :_deserializeNamespaceImpl() }
	function _deserializeArray()     { return :_checkObjTag(TypeTags["array"])     || :_deserializeArrayImpl()     }
	function _deserializeMemblock()  { return :_checkObjTag(TypeTags["memblock"])  || :_deserializeMemblockImpl()  }
	function _deserializeFunction()  { return :_checkObjTag(TypeTags["function"])  || :_deserializeFunctionImpl()  }
	function _deserializeFuncdef()   { return :_checkObjTag(TypeTags["funcdef"])   || :_deserializeFuncdefImpl()   }
	function _deserializeClass()     { return :_checkObjTag(TypeTags["class"])     || :_deserializeClassImpl()     }
	function _deserializeInstance()  { return :_checkObjTag(TypeTags["instance"])  || :_deserializeInstanceImpl()  }
	// function _deserializeThread()    { return :_checkObjTag(TypeTags["thread"])    || :_deserializeThreadImpl()    }
	function _deserializeUpval()     { return :_checkObjTag(TypeTags["upval"])     || :_deserializeUpvalImpl()     }

	function _deserializeNullImpl() =
		null

	function _deserializeBoolImpl() =
		:_input.readUInt8() != 0 ? true : false

	function _deserializeIntImpl() =
		:_integer()

	function _deserializeFloatImpl() =
		:_input.readFloat64()

	function _deserializeWeakrefImpl()
	{
		if(:_input.readUInt8() != 0)
			return weakref(:_deserialize())
		else
			return weakref(:_dummyObj)
	}

	function _deserializeStringImpl()
	{
		#:_strBuf = :_length()
		:_input.readExact(:_strBuf)
		return :_addObject(utf8.decode(:_strBuf))
	}

	function _deserializeTableImpl()
	{
		local len = :_length()
		local ret = :_addObject({})

		for(i: 0 .. len)
		{
			local key, value = :_deserialize(), :_deserialize()
			ret[key] = value
		}

		return ret
	}

	// _deserializeNamespaceImpl is native

	function _deserializeArrayImpl()
	{
		local ret = :_addObject([])
		#ret = :_length()

		for(i: 0 .. #ret)
			ret[i] = :_deserialize()

		return ret
	}

	function _deserializeMemblockImpl()
	{
		local len = :_length()
		local ret = memblock_new(len)
		:_input.readExact(ret)
		return ret
	}

	// _deserializeFunctionImpl is native

	// _deserializeFuncdefImpl is native

	// _deserializeClassImpl is native

	// _deserializeInstanceImpl is native

	// _deserializeUpvalImpl is native
}

/**
Serializes an arbitrary graph of Croc objects rooted by \tt{val} to the stream \tt{output}.

This serialization method is flexible and thorough; almost every type can be serialized, and there is no limit to the
complexity of the object graph. Cycles are handled, and each object will be serialized exactly once. When deserialized,
the object graph will be exactly as it was when it was serialized.

The following types (or specific kinds of values) can't be serialized:
\blist
	\li The \tt{nativeobj} type. It wouldn't even make sense to.
	\li \tt{memblock}s which don't own their data.
	\li Native \tt{function} objects.
	\li \tt{class} and \tt{instance} objects which have finalizers.
	\li The \tt{thread} type. This was serializable in an earlier version, but changes to the VM have made it much more
		difficult to do so. It may not be made serializable again, since there are considerable safety risks in doing
		so.
\endlist

\b{The Format}

When you use \tt{serializeGraph}, it first writes a small, 5-byte signature to \tt{stream} as follows:

\nlist
	\li The endianness of the machine that serialized this data (1 for big-endian, 0 for little-endian).
	\li The bit size of a native word on the machine that serialized this data (like 32 or 64).
	\li The byte size of a Croc int. This is to detect nonstandard implementations which redefine it.
	\li The byte size of a Croc float, for the same reason.
	\li The current serial format version. This changes each time the serial object format is changed.
\endlist

For example, on a 32-bit Intel machine with a stock Croc implementation, this signature would be \tt{[0, 32, 8, 8, n]},
where \em{n} is the serial version.

When this stream is deserialized, it compares the values in the signature to what it expects. Currently if the signature
differs at all from what was expected, the deserialization fails, but this could change in the future (by, for example,
byte-swapping if the endianness is different, or loading older versions of the serial format).

After the signature comes the actual data. Maybe I'll document this more fully sometime! But the general idea is that
reference types are only serialized once each, and when they are encountered for the second and subsequent times, the
serializer encodes a "backreference" to the object, which is an index into a list of reference objects which is built up
as they are encountered. Also, integers are encoded with a variable-length representation since most ints are small and
using a full 8 bytes for each is wasteful.

\b{Serializing Multiple Objects}

In general, this is bad:

\code
serialization.serializeGraph(obj1, trans, s)
serialization.serializeGraph(obj2, trans, s)
\endcode

It's bad because if there is some object \tt{dup} that is pointed to by both \tt{obj1} and \tt{obj2}, when these two
object graphs are deserialized, there will be duplicates of \tt{dup} instead of both graphs pointing to the same object.

Instead, just lump all the objects you want to serialize into a single object, like an array:

\code
serialization.serializeGraph([obj1, obj2], trans, s)
\endcode

\b{The Transients Table}

For these unserializable types (and for any value that appears in the object graph that you don't want to be serialized)
there is the \em{transients table}. The transients table can be an actual table, or an instance which implements
\tt{opIndex}. This table is consulted each time any value is serialized as follows: the table is indexed with the value
to be serialized. If the table returns null for that value, the value is serialized as normal. But if the table returns
any non-null value, that value is serialized in the original value's place. This way, you can serialize references to
things which can't otherwise be serialized, and upon deserialization, you use an inverse transients table to map back
from the "reference values" to the actual values.

Because of the way the transients table works, it should be a one-to-one mapping; that is, no two input values should
give the same output value, or else terrible things will happen upon deserialization. (Objects won't point to the right
things.)

Furthermore, it's your responsibility to make sure that the values returned by the transients table are actually
serializable, and won't cause an infinite loop. That is, a transients table of \tt{{{[1] = 2, [2] = 1}} is invalid, as
trying to serialize either 1 or 2 will cause the serializer to go into an infinite loop by getting the replacement value
for 1, then the replacement value for 2, then 1 again, and so on.

\b{Custom Instance Serialization}

By default, when a class instance is serialized, its fields (and hidden fields) are all written out as key-value pairs.
This isn't always what you want, as there are often fields which shouldn't be serialized, unserializable native fields,
and so on. Trying to deal with this all through the transients table isn't the easiest thing, so instances provide
another kind of serialization.

When an instance is serialized, it's first checked for any field or method named \tt{"opSerialize"}. If one exists, it
must be a bool or function, or else an exception will be thrown.

If it's a bool, \tt{true} means serialize it like normal, and \tt{false} means that this instance is unserializable, and
an exception will be thrown.

If it's a function, it will be called as a method of the instance with two parameters: the first is a reference to the
output stream that was passed to \tt{serializeGraph}, and the second is a serialize callback function. The callback
function takes one parameter, a value to be serialized, and serializes it normally. The output stream is passed to
\tt{opSerialize} in case you want to embed raw data in the output stream.

As an example, the \link{Vector} class provides an \tt{opSerialize} method which would look something like this if it
were written in Croc:

\code
function opSerialize(stream, ser: function)
{
	ser(:itemType())
	ser(:getMemblock())
}
\endcode

\tt{opSerialize} is meant to work with a matching \tt{opDeserialize}, which is explained in \link{deserializeGraph}.

\examples

Here is a very simple example which writes a simple array to a memblock stream, and then deserializes it from the same
stream.

\code
// Uses null, bool, int, float, string, and array types.
local arr = [1, 2.3, "hi", [true, null]]

local mbs = stream.MemblockStream()

// nothing non-serializable in arr, so the transients table is empty
serialization.serializeGraph(arr, {}, mbs)

// At this point, mbs has some data in it. Let's rewind to the beginning of the stream and deserialize
mbs.seek(0, 'b')

local newArr = serialization.deserializeGraph({}, mbs)

// This prints [1, 2.3, "hi", [true, null]]
// But note that newArr is a totally different object from arr!
dumpVal(newArr)
\endcode

Here's a small example that shows how to use the transients table to avoid serializing some object.

\code
// The Vector class has an opSerialize method, but if you try to serialize instances of it without putting Vector
// in the transients table, you'll get an error (since it tries to serialize the native methods of class Vector).
// So let's put Vector into the transients table.

local transients = {[Vector] = "Vector"}
local mbs = stream.MemblockStream(mb)
serialization.serializeGraph(Vector.fromArray("i8", [1, 2, 3]), transients, mbs)
mbs.seek(0, 'b')

// Here we're just inverting the transients table from before, so it maps from the reference values to the real ones.
local revTransients = {[v] = k foreach k, v; transients}
local a = serialization.deserializeGraph(revTransients, mbs)
writeln(a) // prints Vector(i8)[1, 2, 3]
\endcode

Building the transients table yourself can be a bit tedious, so there are some helper functions in this module for
common cases.

\param[val] is the object graph to be serialized.
\param[transients] is the transients table.
\param[output] is the stream to which the data will be written. This will be passed to any instances' \tt{opSerialize}
	methods as explained above.

\throws[ValueError] if an unserializable value is encountered in the object graph.
\throws[TypeError] if an unserializable type is encountered in the object graph.
*/
function serializeGraph(val, transients: table|instance, output: @OutStream)
	Serializer(output).writeGraph(val, transients)

/**
The inverse of \link{serializeGraph}. This reads an object graph from a stream and returns the reconstructed graph.

Most of the details have been covered already in the docs for \link{serializeGraph}.

\b{Custom Instance Deserialization}

If a class instance used an \tt{opSerialize} method to serialize itself, it must have a matching \tt{opDeserialize}
method when being deserialized. When deserializing such an instance, it is created and its fields are all set to
\tt{null}; then the \tt{opDeserialize} method is called on it. This method takes two parameters: the first is a
reference to the input stream that was passed to \tt{deserializeGraph}, and the second is a deserialization function.
This function takes an optional string parameter which indicates the type of value to be expected. If no type is passed,
a single value of any type will be deserialized.

As an example, the \link{Vector} class provides an \tt{opDeserialize} method which would look something like this if it
were written in Croc:

\code
function opDeserialize(stream, deser: function)
{
	local type = deser("string")

	if(type not in validTypes)
		throw ValueError("Malformed data: invalid Vector type code '{}'".format(type))

	local data = deser("memblock")

	// here it sets the members appropriately
}
\endcode

Note how it passes the names of types to the \tt{deser} function to ensure that the proper types of values are
deserialized from the stream. If it just called \tt{deser()}, it would deserialize any type.

When implementing custom deserialization like this, be sure to check the validity of the data that you deserialize! Data
can be tampered with or corrupted and you don't want to end up with objects in invalid states.

\param[transients] is the transients table, except it should be inverted from the one you pass to \link{serializeGraph}.
	That is, the reference values should be the keys, and the values they stand for should be the values.
\param[input] is the stream from which the data will be read.

\returns the reconstructed object graph.
*/
function deserializeGraph(transients: table|instance, input: @InStream) =
	Deserializer(input).readGraph(transients)

/**
Serializes a just-compiled funcdef as a module. All this does is package up the funcdef along with its name, to be read
back out with \link{deserializeModule}.

\param[mod] should be a funcdef with no upvalues that has not yet been closed. In other words, this is what you get from
	compiling a source code module.
\param[name] should be the name of the module, as was extracted from the module source by the compiler.
\param[output] is the stream to which the module will be serialized.
*/
function serializeModule(mod: funcdef, name: string, output: @OutStream)
{
	if(!mod.isCacheable())
		throw ValueError("Only cacheable funcdefs can be serialized as modules")

	if(mod.isCached())
		throw ValueError("Only uncached funcdefs can be serialized as modules")

	output.writeExact(ModuleFourCC)

	local graph = [name, mod]
	local trans = {}

	serializeGraph(graph, trans, output)
}

local _littleBuf = memblock_new(4)

/**
The inverse of \link{serializeModule}, this deserializes a module and checks that the types are proper.

\param[input] is the stream from which the module will be serialized.

\returns two values: the module's top-level funcdef, and the module's name.
*/
function deserializeModule(input: @InStream)
{
	input.readExact(_littleBuf)

	if(_littleBuf != ModuleFourCC)
		throw ValueError("Invalid magic number at beginning of module")

	local trans = {}

	local ret = deserializeGraph(trans, input)

	if(!isArray(ret) || #ret != 2 || !isString(ret[0]) || !isFuncdef(ret[1]))
		throw ValueError("Data deserialized from module is not in the proper format")

	local name, mod = ret.expand()

	if(!mod.isCacheable() || mod.isCached()) // somehow...? just to be sure.
		throw ValueError("Data deserialized from module has an invalid funcdef")

	return mod, name
}

local _stdModules =
[
	"array"
	"ascii"
	"compiler"
	"console"
	"debug"
	"devil"
	"docs"
	"doctools.console"
	"doctools.output"
	"doctools.trac"
	"env"
	"exceptions"
	"file"
	"gc"
	"gl"
	"glfw"
	"hash"
	"json"
	"math"
	"memblock"
	"modules"
	"object"
	"openal"
	"os"
	"path"
	"pcre"
	"repl"
	"serialization"
	"stream"
	"string"
	"text"
	"thread"
	"time"
]

local function _addMethods(t: table, modName: string, v: class|namespace)
{
	local prefix = "!!global " ~ modName ~ "." ~ nameOf(v) ~ "."

	local a, b, c

	if(isClass(v))
		a, b, c = methodsOf(v)
	else
		a, b, c = v.opApply()

	foreach(name, m; a, b, c)
	{
		if(!isFunction(m))
			continue

		t[m] = prefix ~ name
	}
}

local function _addModule(t: table, name: string, mod: namespace, recursion: string)
{
	t[mod] = "!!global " ~ name

	if(recursion == "none")
		return

	foreach(k, v; mod)
	{
		switch(typeof(v))
		{
			case "null", "bool", "int", "float", "nativeobj", "weakref", "string":
				continue

			case "class", "namespace":
				if(recursion == "all")
					_addMethods(t, name, v)

			case "function":
				t[v] = "!!global " ~ name ~ "." ~ nameOf(v)

			default:
				break
		}
	}
}

/**
Constructs a transients table which prevents module namespaces (and optionally the globals within them) from being
serialized.

\param[whichModules] should be either \tt{"all"} or \tt{"std"}. If it's \tt{"all"}, it will go through all the modules
	in \link{modules.loaded} and add them to the returned table. If it's \tt{"std"}, only the standard library (and
	addon modules) will be added. Also, the global namespace (\tt{_G}) is always added.
\param[recursion] should be one of \tt{"none"}, \tt{"globals"}, and \tt{"all"}. If it's \tt{"none"}, only the module
	namespaces themselves are added to the table. If it's \tt{"globals"}, the module namespaces and their global
	variables which hold nameable values (that is, classes, namespaces, and functions) are added. If it's \tt{"all"},
	the previous will be added, as well as methods inside global classes and namespaces.
\param[mode] should be either \tt{"s"} to construct a serialization transients table, or \tt{"d"} to construct a
	deserialization table. The difference between these two modes is that the keys and values are swapped.

\returns a table. The "reference values" will be strings of the form \tt{"!!global <fully qualified name>"}, where
	<fully qualified name> is the full name of the object it replaces. For example, the \link{string.StringBuffer} class
	would have a reference value of \tt{"!!global string.StringBuffer"}, and its constructor would have a reference
	value of \tt{"!!global string.StringBuffer.constructor"}. The exception to this rule is the \tt{_G} namespace, which
	has a reference value of \tt{"!!global _G"}.
*/
function makeTransientsFromModules(whichModules: string, recursion: string, mode: string)
{
	if(whichModules != "all" && whichModules != "std")
		throw ValueError("Invalid value for 'whichModules'")
	if(recursion != "none" && recursion != "globals" && recursion != "all")
		throw ValueError("Invalid value for 'recursion'")
	if(mode != "s" && mode != "d")
		throw ValueError("Invalid value for 'mode'")

	local ret = {[_G] = "!!global _G"}

	if(whichModules == "all")
	{
		foreach(name, mod; modules.loaded)
			_addModule(ret, name, mod, recursion)
	}
	else
	{
		foreach(name; _stdModules)
		{
			if(local mod = modules.loaded[name])
				_addModule(ret, name, mod, recursion)
		}
	}

	if(mode == "d")
	{
		foreach(k, v; ret, "modify")
		{
			ret[v] = k
			ret[k] = null
		}
	}

	return ret
}