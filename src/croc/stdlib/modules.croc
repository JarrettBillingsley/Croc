/** This library forms the core of the Croc module system. When you use an import statement in Croc, it's simply
syntactic sugar for a call to \tt{modules.load}. All of the semantics of imports and such are handled by the
functions and data structures in here. At a high level, the module system is just a mechanism that maps from
strings (module names) to namespaces. The default behavior of this library is just that -- a default. You
can customize the behavior of module importing to your specific needs. */
module modules

local path_join = _G.path.join

// =====================================================================================================================
// Internals

local _setfenv = _modulestmp._setfenv
local _existsTime = _modulestmp._existsTime
local _getFileContents = _modulestmp._getFileContents
local Loading = {}
local Prefixes = {}

local function setLoaded(name: string, ns: namespace)
{
	loaded[name] = ns

	for(local pre = name.rpartition('.'); #pre > 0; pre = pre.rpartition('.'))
		Prefixes[pre] = true
}

local function checkNameConflicts(name: string)
{
	for(local pre = name.rpartition('.'); #pre > 0; pre = pre.rpartition('.'))
	{
		if(pre in loaded)
			throw ImportException("Attempting to import module '{}', but there is already a module '{}'".format(name, pre))
	}

	if(name in Prefixes)
		throw ImportException("Attempting to import module '{}', but other modules use that name as a prefix".format(name))
}

local function initModule(name: string, topLevel: function|funcdef)
{
	if(isFunction(topLevel) and not topLevel.isNative())
		throw ValueError("Error loading module '{}': top-level module function must be a native function".format(name))

	// Make the namespace
	local ns = _G
	local firstParent, firstChild, childName
	local foundSplit = false

	foreach(segment; name.split('.'))
	{
		if(foundSplit)
		{
			ns.(segment) = hash.newNamespace(segment, ns)
			ns = ns.(segment)
		}
		else if(segment in ns)
		{
			local existing = ns.(segment)

			if(not isNamespace(existing))
				throw ImportException("Error loading module '{}': conflicts with existing global".format(name))

			ns = existing
		}
		else
		{
			foundSplit = true
			firstParent = ns
			childName = segment
			firstChild = hash.newNamespace(segment, firstParent)
			ns = firstChild
		}
	}

	// at this point foundSplit is only true if we had to create new namespaces -- that is, upon first loading,
	// and not during reloading
	if(#ns)
		hash.clear(ns)

	// Set up the function

	if(isFunction(topLevel))
		_setfenv(topLevel, ns)
	else
		topLevel = topLevel.close(ns)

	try
		topLevel(with ns)
	catch(e)
	{
		throw ImportException("Error loading module '{}': exception thrown from module's top-level function".format(name)).setCause(e)
	}

	// Add it to the loaded table
	setLoaded(name, ns)

	// Add it to the globals
	if(foundSplit)
		firstParent.(childName) = firstChild

	return ns
}

local function commonLoad(name: string)
{
	// Check to see if we're circularly importing
	if(name in Loading)
		throw ImportException("Module '{}' is being circularly imported".format(name))

	Loading[name] = true
	scope(exit) Loading[name] = null

	// Check for name conflicts
	checkNameConflicts(name)

	// Run through the loaders
	foreach(i, loader; loaders)
	{
		local m = loader(name)

		if(isFuncdef(m) or isFunction(m))
			return initModule(name, m)
		else if(isNamespace(m))
		{
			setLoaded(name, m)
			return m
		}
		else if(m is not null)
			throw TypeError("modules.loaders[{}] expected to return a function, funcdef, namespace, or null, not '{}'".format(i, niceTypeof(m)))
	}

	// Nothing worked :C
	throw ImportException("Error loading module '{}': could not find anything to load".format(name))
}

local function customLoad(name: string)
{
	local m = customLoaders[name]

	if(isFunction(m) or isNamespace(m) or isFuncdef(m))
		return m

	return null
}

local function loadFiles(name: string)
{
	local srcFile = name.replace('.', '/') ~ ".croc"

	foreach(piece; path.split(";"))
	{
		local src = path_join(piece, srcFile)
		local bin = src ~ 'o'
		local srcExists, srcTime = _existsTime(src)
		local binExists, binTime = _existsTime(bin);

		local fd, loadedName

		if(srcExists and (not binExists or srcTime > binTime))
			fd, loadedName = compiler.compileModuleEx(text.getCodec('utf-8').decode(_getFileContents(src), 'strict'), src)
		else if(binExists)
			fd, loadedName = serialization.deserializeModule(stream.MemblockStream(_getFileContents(bin)))
		else
			continue

		if(name is not loadedName)
			throw ImportException("Import name ({}) does not match name given in module statement ({})".format(name, loadedName))

		return fd
	}

	return null
}

// =====================================================================================================================
// Public interface

/** An alphabetized array of names of all the safe Croc standard libraries. The misc library is not covered since it has
no namespace of its own. */
global SafeStdlibNames =
[
	"array"
	"ascii"
	"compiler"
	"console"
	"docs"
	"doctools.console"
	"doctools.output"
	"doctools.trac"
	"env"
	"exceptions"
	"gc"
	"hash"
	"json"
	"math"
	"memblock"
	"modules"
	"object"
	"path"
	"repl"
	"serialization"
	"stream"
	"string"
	"text"
	"thread"
	"time"
]

/** An alphabetized array of names of all the unsafe Croc standard libraries. */
global UnsafeStdlibNames =
[
	"debug"
	"file"
	"os"
]

/** An alphabetized array of names of all the Croc standard libraries, safe and unsafe. */
global AllStdlibNames = (SafeStdlibNames ~ UnsafeStdlibNames).sort()

/** An alphabetized array of names of all the Croc addon libraries. This is all the addons available, not those compiled
in. The \tt{gl} library is also included, even though it's loaded by another addon. */
global AddonNames =
[
	"devil"
	"gl"
	"glfw"
	"imgui"
	"openal"
	"pcre"
]

/** An alphabetized array of names of Croc addon libraries that were included in the host. This doesn't include the
\tt{gl} library. */
global IncludedAddons = _modulestmp.IncludedAddons.sort()

/** This is just a variable that holds a string. This string contains the paths that are used when searching for
modules. The paths are specified using forward slashes to separate path components regardless of the underlying OS, and
semicolons to separate paths.

By default, this variable holds the string ".", which just means "the current directory". If you changed it to something
like ".;imports/current", when you tried to load a module "foo.bar", it would look for "./foo/bar.croc" and
"imports/current/foo/bar.croc" in that order.*/
global path = "."

/** This is a table which you are free to use. It maps from module names (strings) to functions, funcdefs, or
namespaces. This table is used by the \tt{customLoad} step in \link{modules.loaders}; see it for more information. */
global customLoaders = {}

/** This is an important variable. This holds the array of \em{module loaders}, which are functions which take the name
of a module that's being loaded, and return one of four things: nothing or null, to indicate that the next loader should
be tried; a namespace, which is assumed to be the module's namespace; a native function, which is assumed to be a native
module's \em{loader}; or a funcdef, which is assumed to be the function definition of the top-level function of a Croc
module.

By default, two loaders are in this array, in the following order:
\blist

	\li \b{\tt{customLoad}}: This looks in the \link{modules.customLoaders} table for a loader function, funcdef, or
		namespace. If one exists, it just returns that; otherwise, returns null. You can use this behavior to set up
		custom loaders for your own modules: just put the loader in the \link{modules.customLoaders} table, and when
		it's imported, it'll have the loader function, funcdef, or namespace used for it. This is exactly how the
		standard library loaders work.

	\li \b{\tt{loadFiles}}: This looks for files to load and loads them. As explained in \link{modules.path}, the
		paths in that variable will be tried one by one until a file is found or they are all exhausted. This looks
		for both script files (\tt{.croc}) and compiled modules (\tt{.croco}). If it finds just a script file, it
		will compile it and return the resulting top-level funcdef. If it finds just a compiled module, it will load
		it and return the top-level funcdef. If it finds both in the same path, it will load whichever is newer. If
		it gets through all the paths and finds no files, it returns nothing.
\endlist */
global loaders = [customLoad, loadFiles]

/** This is another important variable. This table holds all currently-loaded modules, where the keys are the module
names and the values are the modules' namespaces. */
global loaded = {}

foreach(mod; SafeStdlibNames)
{
	if('.' in mod)
	{
		local first, second = mod.vsplit('.')
		setLoaded(mod, _G.(first).(second))
	}
	else
		setLoaded(mod, _G.(mod))
}

/** Loads a module of the given name and, if successful, returns that module's namespace. If the module is already
loaded (i.e. it has an entry in the \link{modules.loaded} table), just returns the preexisting namespace.

This is the function that the built-in import statement calls. So in fact, "\tt{import foo.bar}" and
"\tt{modules.load("foo.bar")}" do exactly the same thing, at least from the module-loading point of view. Import
statements also give you some syntactic advantages with selective and renamed imports.

The process of loading a module goes something like this:

\nlist
	\li It looks in \link{modules.loaded} to see if the module of the given name has already been imported. If it
		has (i.e. there is a namespace in that table), it returns whatever namespace is stored there.
	\li It makes sure we are not circularly importing this module. If we are, it throws an error.
	\li It makes sure there are no module name conflicts. No module name may be the prefix of any other module's
		name; for example, if you have a module "foo.bar", you may not have a module "foo" as it's a prefix of
		"foo.bar". If there are any conflicts, it throws an error.
	\li It iterates through the \link{modules.loaders} array, calling each successive loader with the module's name.
		If a loader returns null, it continues on to the next loader. If a loader returns a namespace, it puts it in
		the \link{modules.loaded} table and returns that namespace. If a loader returns a function (native only) or
		funcdef, it is assumed to be the modules's top-level function, and the following occurs:
		\nlist
			\li The dotted module name is used to create the namespace for the module in the global namespace
				hierarchy if it doesn't already exist. If the namespace already exists (such as when a module is
				being reloaded), it is cleared at this point.
			\li If the loader returned a funcdef, a closure is created here using that funcdef and the new namespace
				as its environment. If the loader returned a (native) function, its environment is changed to the
				new namespace.
			\li The top-level function is called, with the module's namespace as the 'this' parameter.
			\li If the top-level function succeeds, the module's namespace will be inserted into the global
				namespace hierarchy and into the \link{modules.loaded} table, at which point \tt{modules.load}
				returns that namespace.
			\li Otherwise, if the top-level function fails, no change will be made to the global namespace hierarchy
				(unless the namespace was cleared during a module reload), and an exception will be thrown.
		\endlist
	\li If it gets through the entire array without getting a function or namespace from any loaders, an error is
		thrown saying that the module could not be loaded.
\endlist

\param[name] The name of the module to load, in dotted form (such as "foo.bar").
\returns The namespace of the module after it has been imported.
\throws[ImportException] if no means of loading the module could be found, or if a module loader was found but failed
when run. In the latter case, the exception that was thrown during module loading will be set as the cause of the
exception. */
function load(name: string)
{
	if(local m = loaded[name])
		return m

	return commonLoad(name)
}

/** Very similar to \link{modules.load}, but reloads an already-loaded module. This function replaces step 1 of
\link{modules.load}'s process with a check to see if the module has already been loaded; if it has, it continues on with
the process. If it hasn't been loaded, throws an error.

It is also an error to reload any of the standard libraries or any included addons. */
function reload(name: string)
{
	if(name not in loaded)
		throw ImportException("Attempting to reload module '{}' which has not yet been loaded".format(name))

	if(name in AllStdlibNames or name in IncludedAddons)
		throw ImportException("Attempting to reload standard library or addon library '{}'".format(name))

	return commonLoad(name)
}

/** Runs a function named "main" (if any) in the given namespace with the given arguments.

This will look in the given namespace for a field named \tt{main}. If one exists, and that field is a function, that
function will be called with the namespace as 'this' and any variadic arguments to \tt{runMain} as the arguments.
Otherwise, this function does nothing.

\param[mod] The namespace in which to look.
\param[vararg] The arguments that will be passed to the \tt{main} function.
\returns whatever \tt{main} returns, or nothing if there is no \tt{main} function. */
function runMain(mod: namespace, vararg)
{
	if("main" in mod)
	{
		local main = mod.main

		if(isFunction(main))
			return main(vararg)
	}
}